@{ ViewData["Title"] = "Index";
                Layout = "_Layout"; }
@*<h1>Active Users</h1>
    <h2><span id="users"></span></h2>*@
<h5 class="mb-3">
    <strong>Dashboard</strong>
</h5>

<!--Dashboard widget-->
<div class="mt-1 mb-3 button-container">
    <div class="row pl-0">
        <div class="col-xl col-md-4 col-sm-6 col-12 mb-3">
            <div class="bg-light-blue border shadow">
                <div class="media p-4">
                    <div class="align-self-center mr-3 rounded-circle notify-icon bg-theme">
                        <i class="fa fa-user"></i>
                    </div>
                    <div class="media-body pl-2">
                        <h3 class="mt-0 mb-0">
                            <strong class="text-white" id="users_all">0</strong>
                        </h3>
                        <p>
                            <small class=" bc-description text-white">Total User Online</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row pl-0">
        <div class="col-xl col-md-4 col-sm-6 col-12 mb-3">
            <div class="  border shadow" style="background-color:#54C3D5;">
                <div class="media p-4">
                    <div class="align-self-center mr-3 rounded-circle notify-icon bg-white">
                        <i class="fas fa-users text-theme"></i>
                    </div>
                    <div class="media-body pl-2">
                        <h3 class="mt-0 mb-0">
                            <strong class="text-white" id="Count_TRDI">0</strong>
                        </h3>
                        <p>
                            <small class="  bc-description text-white">TRDI </small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl col-md-4 col-sm-6 col-12 mb-3">
            <div class="  border shadow" style="background-color:#88E47F;">
                <div class="media p-4">
                    <div class="align-self-center mr-3 rounded-circle notify-icon bg-white">
                        <i class="fas fa-users text-theme"></i>
                    </div>
                    <div class="media-body pl-2">
                        <h3 class="mt-0 mb-0">
                            <strong class="text-white" id="Count_MCR">0</strong>
                        </h3>
                        <p>
                            <small class="bc-description text-white">MCR</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl col-md-4 col-sm-6 col-12 mb-3">
            <div class="  border shadow" style="background-color:#8E7FE4;">
                <div class="media p-4">
                    <div class="align-self-center mr-3 rounded-circle notify-icon bg-white">
                        <i class="fas fa-users text-theme"></i>
                    </div>
                    <div class="media-body pl-2">
                        <h3 class="mt-0 mb-0">
                            <strong class="text-white" id="Count_OPM">0</strong>
                        </h3>
                        <p>
                            <small class="bc-description text-white">OPM</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl col-md-4 col-sm-6 col-12 mb-3">
            <div class="  border shadow" style="background-color:#EF5F5F;">
                <div class="media p-4">
                    <div class="align-self-center mr-3 rounded-circle notify-icon bg-white">
                        <i class="fas fa-users text-theme"></i>
                    </div>
                    <div class="media-body pl-2">
                        <h3 class="mt-0 mb-0">
                            <strong class="text-white" id="Count_LAPIS">0</strong>
                        </h3>
                        <p>
                            <small class="bc-description text-white">LAPIS</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl col-md-4 col-sm-6 col-12 mb-3">
            <div class="  border shadow" style="background-color:#5FEFAA;">
                <div class="media p-4">
                    <div class="align-self-center mr-3 rounded-circle notify-icon bg-white">
                        <i class="fas fa-users text-theme"></i>
                    </div>
                    <div class="media-body pl-2">
                        <h3 class="mt-0 mb-0">
                            <strong class="text-white" id="Count_LSI">0</strong>
                        </h3>
                        <p>
                            <small class="bc-description text-white">LSI</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--/Dashboard widget-->
<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-xl-4 ">
            <div class="card   button-container   shadow-sm  " style="height: 100%;">
                <div class="card-header ">
                    <h6 class="mb-2">License in RIST</h6>
                </div>
                <div class=" card-body">
                   
                    <div class="chart-container" position: relative; height:40vh; width:80vw">
                        <b class="mb-2" style="text-align: center; margin: 30px 0px 0px 35%; color: #695A42; ">
                            License in RIST
                        </b>
                        <canvas id="doughnutChart_License" height="150px" style="margin-top: 100px"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-8  ">
            <div class="card-header ">
                <h6 class="mb-2">Summary License by Divisions</h6>
            </div>
            <div class=" card-body" style="background: white;">
                <div class="chart-container">
                    <canvas id="multipleBarChart" height="500px;"></canvas>
                </div>
            </div>
        </div>
       

    </div>

    <div class="row mt-3">
        <div class="col-xl-8  ">
            <div class="card   button-container panel-head-primary  shadow-sm  ">
                <div class="card-header">
                    <h6 class="mb-2">DIV #RISKS >= Threshold: Top 5 Vulnerabilities</h6>
                </div>
                <div class=" card-body">
                    <canvas id="barChart1" height="100px"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-4 " style="height: 100%;">
            <div class="card   button-container   shadow-sm  ">
                <div class="card-header">
                    <h6 class="mb-2">License Review Overall</h6>
                </div>
                <div class=" card-body">
                    <canvas id="pieChart_LicenseReview" height="150px"></canvas>
                </div>
            </div>
        </div>
    </div>

    



</div>
@section scripts{
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script>
        var Arr_LabelName = {};
        var data_LabelName = [];
        var data_All = [];
        function get_ChartColumn() {
        
            var bg_color = ['rgba(255, 99, 132, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(75, 192, 192, 0.5)' , 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)'];
            var bg_border = ['rgba(255, 99, 132, 1)', 'rgba(255, 206, 86, 1)', 'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'];
          
            var dtPoints = [];
            var dtLabel = [];
            var test = [];
            var Pointss = 0;

            $.ajax({
                type: 'POST',
                url: 'Get_SummaryLicenseDiv',
                dataType: 'json',
                success: function (data) {
                   
                    for (var i = 0; i < data.value.licenGroup.length; i++) {
                        var arrPoint = [];

                       
                        for (var l = 0; l < data.value.data[i].length; l++) {


                            if (String(parseInt(data.value.data[i][l][0][0])) == "NaN") {
                                Pointss = 0;

                            } else {
                                Pointss = parseInt(data.value.data[i][l][0][0]);

                            }
                            
                            obj = { y: Pointss, x: data.value.data[i][l][1] }
                            arrPoint.push(Pointss)
                            test.push({ Pointss });
                            Arr_LabelName[i] = { Label: data.value.licenGroup[i] }
                        }
                      
                        dtPoints.push(arrPoint);
                        dtLabel.push({ label: data.value.licenGroup[i], backgroundColor: bg_color[i], borderColor: bg_border[i], data: arrPoint, borderWidth: 1});
                    }
                   
                   
                    var datatest = [];
                    for (var i = 0; i < test.length; i++) {
                        datatest.push(test[i].Pointss);
                    }
                    var i = 0;
                    var multipleBarChart = document.getElementById('multipleBarChart').getContext('2d');

                    var myMultipleBarChart = new Chart(multipleBarChart, {
                        type: 'bar',
                        data: {
                            labels: ["TRDI", "MCR", "OPM", "LAPIS", "LSI"],
                            datasets: dtLabel
                        },

                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            legend: {
                                position: 'bottom'
                            },
                            title: {
                                display: true,
                            text: "Summary License By Divisions",
                            fontFamily: "arial black",
                            fontColor: "#695A42"
                             },
                            tooltips: {
                                mode: 'index',
                                intersect: false
                            },
                            responsive: true,
                            scales: {
                                xAxes: [{
                                    stacked: true,
                                }],
                                yAxes: [{
                                    stacked: true,
                                    //ticks: {
                                    //    stepSize: 200
                                    //}
                                }]
                            }
                            ,
                            //animation: {
                            //    duration: 1,
                            //    onComplete: function () {
                            //        var chartInstance = this.chart,
                            //            ctx = chartInstance.ctx;
                            //        ctx.textAlign = 'center';
                            //        ctx.fillStyle = "rgba(0, 0, 0, 1)";
                            //        ctx.textBaseline = 'alphabetic';
                            //        this.data.datasets.forEach(function (dataset, i) {
                            //            var meta = chartInstance.controller.getDatasetMeta(i);
                                        
                            //            meta.data.forEach(function (bar, index) {
                            //                console.log(i);
                            //                ctx.fillText(dtPoints[i][index], bar._model.x, bar._model.y - 5);
                            //                if (String(index) == "4") {
                                               
                            //                    i = parseInt(i) + 1;
                            //                    console.log(i);
                                               
                            //                }
                            //            });
                            //        });
                            //    }
                            //}

                        }
                    });


                }
            });


            
          
        }

           
       
   

        /*-----------------------chart--------------------------------------*/
        function Get_dataChart() {

            var labels_charts = [];
            var data_charts = [];
            $.ajax({
                type: 'POST',
                url: 'getDataLicense',
                dataType: 'json',
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        labels_charts.push(data[i].license_Type);
                        data_charts.push(data[i].num_License);
                    }
                    console.log(data_charts);
                    console.log(labels_charts);

                    var doughnutPieData = {
                        datasets: [{
                            data: data_charts,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.5)',
                                'rgba(54, 162, 235, 0.5)',
                                'rgba(255, 206, 86, 0.5)',
                                'rgba(75, 192, 192, 0.5)',
                                'rgba(153, 102, 255, 0.5)',
                                'rgba(255, 159, 64, 0.5)'
                            ],
                            borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ],

                        }],
                        labels: labels_charts
                        // These labels appear in the legend and in the tooltips when hovering different arcs

                    };
                    var doughnutPieOptions = {
                        responsive: true,
                        position: 'bottom',
                        animation: {
                            animateScale: true,
                            animateRotate: true
                        },
                        legend: {
                            position: 'bottom'
                        },
                        //animation: {
                        //    duration: 1,
                        //    onComplete: function () {
                        //        var chartInstance = this.chart,
                        //            ctx = chartInstance.ctx;
                        //        ctx.textAlign = 'center';
                        //        ctx.fillStyle = "rgba(0, 0, 0, 1)";
                        //        ctx.textBaseline = 'alphabetic';
                        //        this.data.datasets.forEach(function (dataset, i) {
                        //            var meta = chartInstance.controller.getDatasetMeta(i);
                        //            meta.data.forEach(function (bar, index) {

                        //                var data = data_charts;
                        //                ctx.fillText(data, bar._model.x, bar._model.y - 5);
                        //            });
                        //        });
                        //    }
                        //}
                      
                    };

                    if ($("#doughnutChart_License").length) {
                        var doughnutChartCanvas = $("#doughnutChart_License").get(0).getContext("2d");
                        var doughnutChart = new Chart(doughnutChartCanvas, {
                            type: 'doughnut',
                            data: doughnutPieData,
                           
                            options: doughnutPieOptions,
                            responsive: true,
                            
                        });
                    }

                }
            });


        }
        /*-----------------------chart--------------------------------------*/

        var jqxhr;
        var count_operator_all;
      
        $(document).ready(function () {
            call_get_Operator();
            get_ChartColumn();
            Get_dataChart();
            Chart_GetLicenseReview();
        });
        function Chart_GetLicenseReview() {
           
            var Count_Test = 0,
                Count_NotTest = 0,
                Sum_License = 0,
                bg_color = ['rgba(54, 162, 235, 0.5)', 'rgba(255, 99, 132, 0.5)'],
                bg_borderColor = ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)'],
                Label_Name = ['Complete', 'Incomplete'];
            var doughnutPieOptions = {
                responsive: true,
                animation: {
                    animateScale: true,
                    animateRotate: true
                },
                legend: {
                    position: 'bottom'
                },
                //animation: {  
                //    duration: 1,
                //    onComplete: function () {
                //        var chartInstance = this.chart,
                //            ctx = chartInstance.ctx;
                //        ctx.textAlign = 'center';
                //        ctx.fillStyle = "rgba(0, 0, 0, 1)";
                //        ctx.textBaseline = 'alphabetic';
                //        this.data.datasets.forEach(function (dataset, i) {
                //            var meta = chartInstance.controller.getDatasetMeta(i);
                //            meta.data.forEach(function (bar, index) {

                //                var data = ["Complete: " + Count_Test, "Incomplete: " + Count_NotTest];
                //                ctx.fillText(data, bar._model.x, bar._model.y - 5);
                //            });
                //        });
                //    }
                //}
            };

           
   
                $.ajax({
                    type: 'POST',
                    url: 'Get_licenseReview',
                    dataType: 'json',
                    success: function (data) {
               
                        console.log(data);

                        Count_Test = data.license_Used[0].license_Complete;
                        Count_NotTest = data.license_NotUsed[0].license_Complete;
                    Sum_License = Count_Test + Count_NotTest;

                    var dataList = [{ data: [Count_Test, Count_NotTest], backgroundColor: bg_color, borderColor: bg_borderColor }];
                    console.log(dataList);
                    
                    var doughnutPieData = {
                        datasets: dataList,
                        labels: Label_Name
                    };
                

                    if ($("#pieChart_LicenseReview").length) {
                        var pieChartCanvas = $("#pieChart_LicenseReview").get(0).getContext("2d");
                        var pieChart = new Chart(pieChartCanvas, {
                            type: 'pie',
                            data: doughnutPieData,
                            options: doughnutPieOptions,
                            responsive: true,
                        });
                    }
                }

            });
        }

        function call_get_Operator() {


            jqxhr = $.ajax({
                type: 'POST',
                url: "../api/GetOperator",
                success: function (Data) {
                    var Count_OpTRDI = [];
                    var Count_OpMCR = [];
                    var Count_OpOPM = [];
                    var Count_OpLAPIS = [];
                    var Count_OpLSI = [];
                 

                    if (Data.length != count_operator_all) {
                        Count_OpTRDI.length = 0;
                        Count_OpMCR.length = 0;
                        Count_OpOPM.length = 0;
                        Count_OpLAPIS.length = 0;
                        Count_OpLSI.length = 0;

                        $("#users_all").html(Data.length);
                        for (var i = 0; i < Data.length; i++) {

                            if (Data[i].opDepartment.includes("TR")) {
                                Count_OpTRDI.push(1);

                            }
                            if (Data[i].opDepartment.includes("MCR")) {
                                Count_OpMCR.push(1);
                            }

                            if (Data[i].opDepartment.includes("OPM")) {
                                Count_OpOPM.push(1);
                            }

                            if (Data[i].opDepartment.includes("LAPIS")) {
                                Count_OpLAPIS.push(1);
                            }

                            if (Data[i].opDepartment.includes("LSI")) {
                                Count_OpLSI.push(1);
                            }

                            $("#Count_TRDI").html(Count_OpTRDI.length);
                            $("#Count_MCR").html(Count_OpMCR.length);
                            $("#Count_OPM").html(Count_OpOPM.length);
                            $("#Count_LAPIS").html(Count_OpLAPIS.length);
                            $("#Count_LSI").html(Count_OpLSI.length);

                        }
                        count_operator_all = Data.length;
                    }




                }
            })
            jqxhr.always(function () {
                call_get_Operator();
            });

        }
    </script>
    <script src="~/lib/microsoft-signalr/signalr.js"></script>
    <script type="text/javascript">

        document.addEventListener('DOMContentLoaded',
            function () {
                function bindConnectionMessage(connection) {
                    var messageCallback = function (message) {
                        console.log('message' + message);
                        if (!message) return;
                        var userCountSpan = document.getElementById('users');
                        userCountSpan.innerText = message;
                    };
                    connection.on("updateCount", messageCallback);
                    connection.onclose(onConnectionError);
                }

                function onConnected(connection) {
                    console.log('connection started');
                }

                function onConnectionError(error) {
                    if (error && error.message) {
                        //alert(error.message);
                        //console.error(error.message);
                    }
                }

                var connection = new window.signalR.HubConnectionBuilder().configureLogging(window.signalR.LogLevel.Debug).withUrl('/DemoSkillTest/CounterHub').build();


                bindConnectionMessage(connection);
                connection.start()
                    .then(function () {
                        onConnected(connection);
                    })
                    .catch(function (error) {
                        //alert(error.message);
                        //console.error(error.message);
                    });
            });

    </script>
}
